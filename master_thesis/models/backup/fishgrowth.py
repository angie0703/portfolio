# -*- coding: utf-8 -*-
"""
Created on Thu Nov  2 14:30:32 2023

@author: Angela

Class for Fish Growth Model

"""
import numpy as np
from models.module import Module
from models.integration import fcn_euler_forward 

class Fish(Module):
    '''
    Fish growth and Nutrient Balances model by Reyes Lastiri (2016)
    
    Feeding intake rate (f_fed) is based on Jamu et al (2000) that consider
    Nile Tilapia feed intake preferences (phytoplankton>organic matter>artificial fish feed)

    
    Parameters
    ----------
    tsim : array
        A sequence of time points for the simulation [d]
    dt : scalar
        Time step for the numerical integration [d]
    x0 : dictionary of floats
        Initial conditions of the state variables
        
        ======  =============================================================
        key     meaning
        ======  =============================================================
        'Mfish'   [gDM] Initial Fish Dry weight
        'Mdig'    [gDM] Initial Digestive weight
        'Muri'    [gDM] Initial Urinary weight
        'Mfis_fr' [g] Initial Fish Fresh weight
        'Mdig_n'  [gDM] Initial normalized Digestive weight
        ======  =============================================================
        
    p : dictionary of floats
        Model parameters
        
        =======  ============================================================
        key      meaning
        =======  ============================================================
        'tau_dig'  [h] time constants for digestive
        'tau_uri'  [h] time constants for urinary
        'k_upt'  [-] fraction of nutrient uptake for fish weight
        'k_N_upt'[-] fraction of N uptake by fish
        'k_P_upt'[-] fraction of P uptake by fish
        'k_prt'  [-] fraction of particulate matter excreted
        'k_N_prt'[-] fraction of N excreted as particulate matter
        'k_P_prt'[-] fraction of P excreted as particulate matter
        'x_N_fed'[-] fraction of N in fish feed
        'x_P_fed'[-] fraction of P in fish feed
        'Chla'   [g Chla/g phytoplankton] Phytoplankton biomass density
        'Ksp'    [-] Half saturation of phytoplankton growth
        =======  ============================================================

    u : dictionary of 2D arrays
        Controlled inputs (required for method 'run'),
        of shape (len(t_d),2) for time and controlled input.
        
        =======  ============================================================
        key      meaning
        =======  ============================================================
        'phy'    [gDM/day] phytoplankton biomass
        'fed'    [gDM/day] fish feed weight per day
        =======  ============================================================
    
    Returns
    -------
    y : dictionary of arrays
        Model outputs (returned by method 'run')
        
        =======  ============================================================
        key      meaning
        =======  ============================================================
        'Mfish'   [gDM] Initial Fish weight
        'Mdig'    [gDM] Initial Digestive weight
        'Muri'    [gDM] Initial Urinary weight
        'Mfis_fr' [gDM] Fresh fish weight
        'Mdig_n'  [gDM] Normalised mass in digestive system
        =======  ============================================================
        
    f : dictionary of arrays
        Mass flow rates (generated by method 'run')
        
        =======    ============================================================
        key        meaning
        =======    ============================================================
        'f_upt'    [gDM h-1] nutrient uptake rate
        'f_prt'    [gDM h-1] particulate matter excretion rate
        'f_sol'    [gDM h-1] soluble waste excretion rate
        'f_digout' [gDM h-1] total mass flow rate leaving the digestive system
        'f_diguri' [gDM h-1] digestive to urinary rate
        'f_fed'    [gDM h-1] feeding rate
        'f_N_upt'  [???] N mass uptake flow rate by fish during growth
        'f_P_upt'  [???] P mass uptake flow rate by fish during growth
        'f_N_prt'  [???] N mass excretion flow rate by fish during growth
        'f_P_prt'  [???] P mass excretion flow rate by fish during growth
        'f_N_sol'  [???] N mass soluble flow rate
        'f_P_sol'  [???] P mass soluble flow rate
        'f_TAN_n'  [???] excretion flow rate of soluble TAN
        =======  ============================================================
        
        
    References
    ----------
    * 
    '''
    def __init__(self, tsim, dt, x0, p):
        Module.__init__(self, tsim, dt, x0, p)
        # Initialize dictionary of flows
        self.f = {}
        self.f_keys = ('f_upt', 'f_prt', 'f_sol', 'f_digout', 'f_N_sol', 'f_P_sol',
                       'f_diguri', 'f_fed', 'f_N_upt', 'f_P_upt', 'f_N_prt', 'f_P_prt', 'f_TAN_n')
        for k in self.f_keys:
            self.f[k] = np.full((self.t.size,), np.nan)

        
    def diff(self, _t, _x0):
        # -- Initial conditions
        Mfish, Mdig, Muri, Mfis_fr, Mdig_n = _x0[0], _x0[1], _x0[2], _x0[3], _x0[4]
        
        # -- Model parameteres
        # - fish growth
        tau_dig = self.p['tau_dig']  # [h] time constants for digestive
        tau_uri = self.p['tau_uri']  # [h] time constants for urinary
        k_upt = self.p['k_upt']  # [-] fraction of nutrient uptake for fish weight
        k_N_upt = self.p['k_N_upt']  # [-] fraction of N uptake by fish
        k_P_upt = self.p['k_P_upt']  # [-] fraction of P uptake by fish
        k_prt = self.p['k_prt']  # [-] fraction of particulate matter excreted
        k_N_prt = self.p['k_N_prt']  # [-] fraction of N particulate matter excreted
        k_P_prt = self.p['k_P_prt']  # [-] fraction of P particulate matter excreted
        x_N_fed = self.p['x_N_fed'] #[-] fraction of N in feed
        x_P_fed = self.p['x_P_fed'] #[-] fraction of P in feed
        k_DMR = self.p['k_DMR']
        k_TAN_sol = self.p['k_TAN_sol']
        Chla = self.p['Chla'] #Phytoplankton biomass density [mg Chl a L-1]
        Ksp = self.p['Ksp'] #Half-saturation constant for phytoplankton
        k_N_sol = 1 - k_N_upt - k_N_prt # [-] fraction of N in soluble matter
        k_P_sol = 1 - k_P_upt - k_P_prt # [-] fraction of P in soluble matter

        # -- Controlled input
        phy = self.u['phy'] #[g/day] phytoplankton biomass
        fed = self.u['fed'] #[g/day] fish feed weight per day
        
        #-feed intake rate
        r_phy = Chla/(Ksp+Chla) #[-] ratio of phytoplankton eaten by fish
        f_fed = r_phy*phy + (1-r_phy)*fed
        
        # - Flows
        
        #Fish Model
        # [gDM h-1] total mass flow rate leaving the digestive system
        f_digout = (1/tau_dig)*Mdig
        # [gDM h-1] nutrient uptake rate
        f_upt = k_upt*f_digout
        # [gDM h-1] particulate matter excretion rate
        f_prt = k_prt*f_digout
        # [gDM h-1] soluble waste excretion rate
        f_sol = (1/tau_uri)*Muri
        # [gDM h-1] digestive to urinary rate
        f_diguri = f_digout - f_upt - f_prt
        
        #Nutrient Balances
        #N uptake flow rate by fish during growth
        f_N_upt = k_N_upt*x_N_fed*f_digout
        #N excretion flow rate by fish during growth
        f_N_prt = k_N_prt*x_N_fed*f_digout
        #P uptake flow rate by fish during growth
        f_P_upt = k_P_upt*x_P_fed*f_digout
        #P excretion flow rate by fish during growth
        f_P_prt = k_P_prt*x_P_fed*f_digout
        #N flow rate in soluble matter
        f_N_sol = k_N_sol*x_N_fed*(f_digout/f_diguri)*f_sol
        #P flow rate in soluble matter
        f_P_sol = k_P_sol*x_P_fed*(f_digout/f_diguri)*f_sol    


        # -- Differential equations [gDM day-1]
        dMfish_dt = f_upt
        dMdig_dt = f_fed - f_digout
        dMuri_dt = f_diguri - f_sol
        
        # -- Supporting equations
        Mfis_fr = Mfish/k_DMR
        Mdig_n = Mdig/fed
        f_TAN_n = k_TAN_sol*(f_N_sol/fed)
        
        # -- Store flows [kgC m-2 d-1]
        idx = np.isin(self.t, _t)
        self.f['f_digout'][idx] = f_digout
        self.f['f_fed'][idx] = f_fed
        self.f['f_upt'][idx] = f_upt
        self.f['f_prt'][idx] = f_prt
        self.f['f_sol'][idx] = f_sol
        self.f['f_diguri'][idx] = f_diguri
        self.f['f_N_prt'][idx] = f_N_prt
        self.f['f_P_prt'][idx] = f_P_prt
        self.f['f_N_upt'][idx] = f_N_upt
        self.f['f_P_upt'][idx] = f_P_upt
        self.f['f_N_sol'][idx] = f_N_sol
        self.f['f_P_sol'][idx] = f_P_sol
        self.f['f_TAN_n'][idx] = f_TAN_n
        return np.array([dMfish_dt,dMdig_dt, dMuri_dt, Mfis_fr, Mdig_n])
    
    def output(self, tspan):
        # Retrieve object properties
        dt = self.dt        # integration time step size
        diff = self.diff    # function with system of differential equations
        Mfish0 = self.x0['Mfish'] # initial condition
        Mdig0 = self.x0['Mdig'] # initial condiiton
        Muri0 = self.x0['Muri'] #initial condition
        Mfis_fr0 = self.x0['Mfis_fr'] #initial condition
        Mdig_n0 = self.x0['Mdig_n'] #initial condition
        
        # Numerical integration
        y0 = np.array([Mfish0, Mdig0, Muri0, Mfis_fr0, Mdig_n0])
        y_int = fcn_euler_forward(diff,tspan,y0,h=dt)
        
        # Model results        
        t = y_int['t']
        Mfish = y_int['y'][0,:]
        Mdig = y_int['y'][1,:]
        Muri = y_int['y'][2,:]
        Mfis_fr = y_int['y'][3,:]
        Mdig_n = y_int['y'][4,:]

        return {
            't':t,
            'Mfish': Mfish,
            'Mdig': Mdig,
            'Muri': Muri,
            'Mfis_fr': Mfis_fr,
            'Mdig_n': Mdig_n
            
        }
        