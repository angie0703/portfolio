# -*- coding: utf-8 -*-
"""
Created on Thu Nov  2 14:30:32 2023

@author: Angela

Class for Fish Growth Model, with disturbances factor from Yi (1999). Environmental factor
such as Temperature, DO, photoperiod, could affect the feeding intake rate, hence the 
overall growth of Nile Tilapia.

"""
import numpy as np
from models.module import Module
from models.integration import fcn_euler_forward

class Fish(Module):
    '''
    Fish growth and Nutrient Balances model by Reyes Lastiri (2016)
    Feeding intake rate (f_fed) is based on Jamu et al (2000) that consider
    Nile Tilapia feed intake preferences (phytoplankton>organic matter>artificial fish feed)

    
    Parameters
    ----------
    tsim : array
        A sequence of time points for the simulation [d]
    dt : scalar
        Time step for the numerical integration [d]
    x0 : dictionary of floats
        Initial conditions of the state variables
        
        ======  =============================================================
        key     meaning
        ======  =============================================================
        'Mfish'   [gDM] Initial Fish Dry weight
        'Mdig'    [gDM] Initial Digestive weight
        'Muri'    [gDM] Initial Urinary weight
        ======  =============================================================
        
    p : dictionary of floats
        Model parameters
        
        =======  ============================================================
        key      meaning
        =======  ============================================================
        'tau_dig'  [h] time constants for digestive
        'tau_uri'  [h] time constants for urinary
        'k_upt'  [-] fraction of nutrient uptake for fish weight
        'k_N_upt'[-] fraction of N uptake by fish
        'k_P_upt'[-] fraction of P uptake by fish
        'k_prt'  [-] fraction of particulate matter excreted
        'k_N_prt'[-] fraction of N excreted as particulate matter
        'k_P_prt'[-] fraction of P excreted as particulate matter
        'x_N_fed'[-] fraction of N in fish feed
        'x_P_fed'[-] fraction of P in fish feed
        'fT'     [-] Temperature factor 
        'fDO'    [-] DO factor
        =======  ============================================================

    u : dictionary of 2D arrays
        Controlled inputs (required for method 'run'),
        of shape (len(t_d),2) for time and controlled input.
        
        =======  ============================================================
        key      meaning
        =======  ============================================================
        'phy'    [gDM/day] phytoplankton biomass
        'fed'    [gDM/day] fish feed weight per day
        =======  ============================================================
        
    d : dictionary of 2D arrays
        Disturbances (required for method 'run'),
        of shape (len(t_d),2) for time and controlled input.
        
        =======  ============================================================
        key      meaning
        =======  ============================================================
        'T'     [C] Air Temperature
        'DO'    [mg l-1] Dissolved Oxygen
        =======  ============================================================
    
    Returns
    -------
    y : dictionary of arrays
        Model outputs (returned by method 'run')
        
        =======  ============================================================
        key      meaning
        =======  ============================================================
        'Mfish'   [gDM] Initial Fish weight
        'Mdig'    [gDM] Initial Digestive weight
        'Muri'    [gDM] Initial Urinary weight
        =======  ============================================================
        
    f : dictionary of arrays
        Mass flow rates (generated by method 'run')
        
        =======    ============================================================
        key        meaning
        =======    ============================================================
        'f_upt'    [gDM h-1] nutrient uptake rate
        'f_prt'    [gDM h-1] particulate matter excretion rate
        'f_sol'    [gDM h-1] soluble waste excretion rate
        'f_digout' [gDM h-1] total mass flow rate leaving the digestive system
        'f_diguri' [gDM h-1] digestive to urinary rate
        'f_fed'    [gDM h-1] feeding rate
        'f_N_upt'  [gDM h-1] N mass uptake flow rate by fish during growth
        'f_P_upt'  [gDM h-1] P mass uptake flow rate by fish during growth
        'f_N_prt'  [gDM h-1] N mass excretion flow rate by fish during growth
        'f_P_prt'  [gDM h-1] P mass excretion flow rate by fish during growth
        'f_N_sol'  [gDM h-1] N mass soluble flow rate
        'f_P_sol'  [gDM h-1] P mass soluble flow rate
        'f_TAN'  [gDM h-1] excretion flow rate of soluble TAN
        =======  ============================================================
        
        
    References
    ----------
    * 
    '''
    def __init__(self, tsim, dt, x0, p):
        Module.__init__(self, tsim, dt, x0, p)
        # Initialize dictionary of flows
        self.f = {}
        self.f_keys = ('f_upt', 'f_prt', 'f_sol', 'f_digout', 'f_N_sol', 'f_P_sol',
                       'f_diguri', 'f_fed', 'f_N_upt', 'f_P_upt', 'f_N_prt', 
                       'f_P_prt', 'f_fed_phy')
        for k in self.f_keys:
            self.f[k] = np.full((self.t.size,), np.nan)

    def diff(self, _t, _x0):
        # -- Initial conditions
        Mfish = _x0[0]
        Mdig = _x0[1]
        Muri=  _x0[2]
        
        # -- Model parameteres
        
        # -- Physical constants
        DOmin = 0.3            # [mg/l] DO minimal for open-pond Nile Tilapia
        DOcrit = 3             # [mg/l] DO critical for open-pond Nile Tilapia
        
        # - fish growth
        tau_dig = self.p['tau_dig']  # [h] time constants for digestive
        tau_uri = self.p['tau_uri']  # [h] time constants for urinary
        k_upt = self.p['k_upt']  # [-] fraction of nutrient uptake for fish weight
        k_N_upt = self.p['k_N_upt']  # [-] fraction of N uptake by fish
        k_P_upt = self.p['k_P_upt']  # [-] fraction of P uptake by fish
        k_prt = self.p['k_prt']  # [-] fraction of particulate matter excreted
        k_N_prt = self.p['k_N_prt']  # [-] fraction of N particulate matter excreted
        k_P_prt = self.p['k_P_prt']  # [-] fraction of P particulate matter excreted
        x_N_fed = self.p['x_N_fed'] #[-] fraction of N in feed
        x_P_fed = self.p['x_P_fed'] #[-] fraction of P in feed
        k_DMR = self.p['k_DMR']
        k_N_sol = 1 - k_N_upt - k_N_prt # [-] fraction of N in soluble matter
        k_P_sol = 1 - k_P_upt - k_P_prt # [-] fraction of P in soluble matter
        Tmin = self.p['Tmin']  # [째C] Minimum Temperature for Nile Tilapia
        Topt = self.p['Topt']  # [째C] Optimum Temperature for Nile Tilapia
        Tmax = self.p['Tmax']  # [째C] Maximum Temperature for Nile Tilapia
        V_pond = self.p['V_pond']
        Ksp = self.p['Ksp']

        # -- Disturbances at instant _t
        DO = self.d['DO']
        T = self.d['T']
        Mphy = self.d['Mphy']
        _DO = np.interp(_t,DO[:,0],DO[:,1])     # [mg l-1] Dissolved Oxygen
        _T = np.interp(_t,T[:,0],T[:,1])        # [째C] Environment temperature
        _Mphy = np.interp(_t,Mphy[:,0],Mphy[:,1]) #[g d-1] Phytoplankton biomass 
        
        # -- Controlled input
        # Mfed = self.u['Mfed']
        
        # #-feed intake rate with disturbances factor
        # det = cl*(_Mphy**2) #similar to f3 (phytoplankton death rate due to intraspecific competitions)
        # r_phy = _Mphy/(Ksp+_Mphy) #[-] ratio of phytoplankton eaten by fish
        # r_det = det/(Ksd+det)
        # print('Mphy:', _Mphy, 'r_phy: ', r_phy, 'r_det: ', r_det)
        fT = 0
        if Topt <= _T < Tmax:
            fT = np.exp(-4.6*(((_T-Topt)/(Tmax-Topt))**4))
        elif Tmin < _T < Topt:
            fT = np.exp(-4.6*(((Topt-_T)/(Topt-Tmin))**4))
        
        fDO = 0
        if DOmin <= _DO <= DOcrit:
            fDO = (_DO-DOmin)/(DOcrit - DOmin)
        else:
            fDO = 1
        
        ftime = 0
        if 9 <= _t%24 < 18: #to produce approximately 300 - 400 gram of one fish: 9 - 18 
            ftime = 1
        
        #to simulate several feeding frequency
        # if _t%24 == 8 or _t%24 == 10 or _t%24 == 12 or _t%24 == 14 or _t%24 == 16 or _t%24 == 18: 
        #     ftime = 1
        
        f_fed_max = 0.03*Mfish
        
        f_fed = ftime*fT*fDO*f_fed_max
        f_fed_phy = ((_Mphy/V_pond)/(Ksp + (_Mphy/V_pond)))*f_fed
        
        # - Flows
        
        #Fish Model
        # [gDM h-1] total mass flow rate leaving the digestive system
        f_digout = (1/tau_dig)*Mdig
        # [gDM h-1] nutrient uptake rate
        f_upt = k_upt*f_digout
        # [gDM h-1] particulate matter excretion rate
        f_prt = k_prt*f_digout
        # [gDM h-1] soluble waste excretion rate
        f_sol = (1/tau_uri)*Muri
        # [gDM h-1] digestive to urinary rate
        f_diguri = f_digout - f_upt - f_prt
        
        #Nutrient Balances
        #N uptake flow rate by fish during growth
        f_N_upt = k_N_upt*x_N_fed*f_digout
        #N excretion flow rate by fish during growth
        f_N_prt = k_N_prt*x_N_fed*f_digout
        #P uptake flow rate by fish during growth
        f_P_upt = k_P_upt*x_P_fed*f_digout
        #P excretion flow rate by fish during growth
        f_P_prt = k_P_prt*x_P_fed*f_digout
        #N flow rate in soluble matter
        f_N_sol = k_N_sol*x_N_fed*(f_digout/f_diguri)*f_sol
        #P flow rate in soluble matter
        f_P_sol = k_P_sol*x_P_fed*(f_digout/f_diguri)*f_sol    
        
        
        # -- Differential equations [gDM day-1]
        dMfish_dt = f_upt
        dMdig_dt = f_fed - f_digout
        dMuri_dt = f_diguri - f_sol

        # -- Store flows [kgC m-2 d-1]
        idx = np.isin(self.t, _t)
        self.f['f_digout'][idx] = f_digout
        self.f['f_fed'][idx] = f_fed
        self.f['f_upt'][idx] = f_upt
        self.f['f_prt'][idx] = f_prt
        self.f['f_sol'][idx] = f_sol
        self.f['f_diguri'][idx] = f_diguri
        self.f['f_N_prt'][idx] = f_N_prt
        self.f['f_P_prt'][idx] = f_P_prt
        self.f['f_N_upt'][idx] = f_N_upt
        self.f['f_P_upt'][idx] = f_P_upt
        self.f['f_N_sol'][idx] = f_N_sol
        self.f['f_P_sol'][idx] = f_P_sol
        self.f['f_fed_phy'][idx] = f_fed_phy
        
        return np.array([dMfish_dt,
                         dMdig_dt, 
                         dMuri_dt
                         ])
    
    def output(self, tspan):
        # Retrieve object properties
        dt = self.dt        # integration time step size
        diff = self.diff    # function with system of differential equations
        Mfish0 = self.x0['Mfish'] # initial condition
        Mdig0 = self.x0['Mdig'] # initial condiiton
        Muri0 = self.x0['Muri'] #initial condition
        
        # Numerical integration
        y0 = np.array([Mfish0, 
                       Mdig0, 
                       Muri0
                       ])
        y_int = fcn_euler_forward(diff,tspan,y0,h=dt)

        # Model results
        #State variables
        t = y_int['t']
        Mfish = y_int['y'][0,:]
        Mdig = y_int['y'][1,:]
        Muri = y_int['y'][2,:]
        
        #parameter
        # - fish growth
        tau_dig = self.p['tau_dig']  # [h] time constants for digestive
        tau_uri = self.p['tau_uri']  # [h] time constants for urinary
        k_upt = self.p['k_upt']  # [-] fraction of nutrient uptake for fish weight
        k_N_upt = self.p['k_N_upt']  # [-] fraction of N uptake by fish
        k_P_upt = self.p['k_P_upt']  # [-] fraction of P uptake by fish
        k_prt = self.p['k_prt']  # [-] fraction of particulate matter excreted
        k_N_prt = self.p['k_N_prt']  # [-] fraction of N particulate matter excreted
        k_P_prt = self.p['k_P_prt']  # [-] fraction of P particulate matter excreted
        x_N_fed = self.p['x_N_fed'] #[-] fraction of N in feed
        x_P_fed = self.p['x_P_fed'] #[-] fraction of P in feed
        # k_TAN_sol = self.p['k_TAN_sol'] 
        k_N_sol = 1 - k_N_upt - k_N_prt # [-] fraction of N in soluble matter
        k_P_sol = 1 - k_P_upt - k_P_prt # [-] fraction of P in soluble matter
        #Flows
        
        #Fish Model
        # [gDM h-1] total mass flow rate leaving the digestive system
        f_digout = (1/tau_dig)*Mdig
        # [gDM h-1] nutrient uptake rate
        f_upt = k_upt*f_digout
        # [gDM h-1] particulate matter excretion rate
        f_prt = k_prt*f_digout
        # [gDM h-1] soluble waste excretion rate
        f_sol = (1/tau_uri)*Muri
        # [gDM h-1] digestive to urinary rate
        f_diguri = f_digout - f_upt - f_prt
        
        #Nutrient Balances
        #N excretion flow rate by fish during growth
        f_N_prt = k_N_prt*x_N_fed*f_digout
        #P excretion flow rate by fish during growth
        f_P_prt = k_P_prt*x_P_fed*f_digout
        #N flow rate in soluble matter
        f_N_sol = k_N_sol*x_N_fed*(f_digout/f_diguri)*f_sol
        #P flow rate in soluble matter
        f_P_sol = k_P_sol*x_P_fed*(f_digout/f_diguri)*f_sol
        # f_TAN = k_TAN_sol*f_N_sol

        return {
            't':t,
            'Mfish': Mfish,
            'Mdig': Mdig,
            'Muri': Muri,
            'f_N_prt': f_N_prt,
            'f_P_prt': f_P_prt,
            # 'f_TAN': f_TAN,
            'f_P_sol': f_P_sol,
            'f_N_sol': f_N_sol
        }
        