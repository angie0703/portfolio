# -*- coding: utf-8 -*-
"""
Created on Thu Nov  2 14:30:32 2023

@author: Angela

Class for Fish and Phytoplankton Growth Model, with disturbances factor from Yi (1999). Environmental factor
such as Temperature, DO, photoperiod, could affect the feeding intake rate, hence the 
overall growth of Nile Tilapia.

Class FishPhy for CRF

"""
import numpy as np
from models.module import Module
from models.integration import fcn_euler_forward, fcn_rk4


class FishPhy(Module):
    '''
    Fish growth and Nutrient Balances model by Reyes Lastiri (2021)
    Feeding intake rate (f_fed) is based on Jamu et al (2000) that consider
    Nile Tilapia feed intake preferences (phytoplankton>organic matter>artificial fish feed)
    Phytoplankton growth from Chen et al (2015)

    
    Parameters
    ----------
    tsim : array
        A sequence of time points for the simulation [d]
    dt : scalar
        Time step for the numerical integration [d]
    x0 : dictionary of floats
        Initial conditions of the state variables
        
        ======  =============================================================
        key     meaning
        ======  =============================================================
        'Mfish'   [gDM] Initial Fish Dry weight
        'Mdig'    [gDM] Initial Digestive weight
        'Muri'    [gDM] Initial Urinary weight
        'Mfis_fr' [g] Initial Fish Fresh weight
        'Mdig_n'  [gDM] Initial normalized Digestive weight
        ======  =============================================================
        
    p : dictionary of floats
        Model parameters
        
        =======  ============================================================
        key      meaning
        =======  ============================================================
        'tau_dig'  [h] time constants for digestive
        'tau_uri'  [h] time constants for urinary
        'k_upt'  [-] fraction of nutrient uptake for fish weight
        'k_N_upt'[-] fraction of N uptake by fish
        'k_P_upt'[-] fraction of P uptake by fish
        'k_prt'  [-] fraction of particulate matter excreted
        'k_N_prt'[-] fraction of N excreted as particulate matter
        'k_P_prt'[-] fraction of P excreted as particulate matter
        'x_N_fed'[-] fraction of N in fish feed
        'x_P_fed'[-] fraction of P in fish feed
        'Chla'   [g Chla/g phytoplankton] Phytoplankton biomass density
        'Ksp'    [-] Half saturation of phytoplankton growth
        'fT'     [-] Temperature factor 
        'fDO'    [-] DO factor
        'Pho'    [h] Photoperiod length
        =======  ============================================================

    u : dictionary of 2D arrays
        Controlled inputs (required for method 'run'),
        of shape (len(t_d),2) for time and controlled input.
        
        =======  ============================================================
        key      meaning
        =======  ============================================================
        'phy'    [gDM/day] phytoplankton biomass
        'fed'    [gDM/day] fish feed weight per day
        =======  ============================================================
        
    d : dictionary of 2D arrays
        Disturbances (required for method 'run'),
        of shape (len(t_d),2) for time and controlled input.
        
        =======  ============================================================
        key      meaning
        =======  ============================================================
        'T'     [C] Air Temperature
        'DO'    [mg l-1] Dissolved Oxygen
        =======  ============================================================
    
    Returns
    -------
    y : dictionary of arrays
        Model outputs (returned by method 'run')
        
        =======  ============================================================
        key      meaning
        =======  ============================================================
        'Mfish'   [gDM] Initial Fish weight
        'Mdig'    [gDM] Initial Digestive weight
        'Muri'    [gDM] Initial Urinary weight
        'Mfis_fr' [gDM] Fresh fish weight
        =======  ============================================================
        
    f : dictionary of arrays
        Mass flow rates (generated by method 'run')
        
        =======    ============================================================
        key        meaning
        =======    ============================================================
        'f_upt'    [gDM h-1] nutrient uptake rate
        'f_prt'    [gDM h-1] particulate matter excretion rate
        'f_sol'    [gDM h-1] soluble waste excretion rate
        'f_digout' [gDM h-1] total mass flow rate leaving the digestive system
        'f_diguri' [gDM h-1] digestive to urinary rate
        'f_fed'    [gDM h-1] feeding rate
        'f_N_upt'  [gDM h-1] N mass uptake flow rate by fish during growth
        'f_P_upt'  [gDM h-1] P mass uptake flow rate by fish during growth
        'f_N_prt'  [gDM h-1] N mass excretion flow rate by fish during growth
        'f_P_prt'  [gDM h-1] P mass excretion flow rate by fish during growth
        'f_N_sol'  [gDM h-1] N mass soluble flow rate
        'f_P_sol'  [gDM h-1] P mass soluble flow rate
        'f_TAN'  [gDM h-1] excretion flow rate of soluble TAN
        =======  ============================================================
        
        
    References
    ----------
    * 
    '''
    def __init__(self, tsim, dt, x0, p):
        Module.__init__(self, tsim, dt, x0, p)
        # Initialize dictionary of flows
        self.f = {}
        self.f_keys = ('f_upt', 'f_prt', 'f_sol', 'f_digout', 'f_N_sol', 'f_P_sol',
                       'f_diguri', 'f_fed', 'f_N_upt', 'f_P_upt', 'f_N_prt', 'f_P_prt', 'f_TAN', 
                       'f1', 'f2', 'f3', 'f4', 'f5', 'f6', 'f7', 'f_fed_phy')
        for k in self.f_keys:
            self.f[k] = np.full((self.t.size,), np.nan)

    def diff(self, _t, _x0):
        #%% Disturbances 
        # -- Disturbances at instant _t
        DO = self.d['DO']
        T = self.d['T']
        I0 = self.d['I0']
        DVS = self.d['DVS']
        Rain = self.d['Rain']
        
        _DO = np.interp(_t,DO[:,0],DO[:,1])     # [mg l-1] Dissolved Oxygen
        _T = np.interp(_t,T[:,0],T[:,1])        # [°C] Environment temperature
        _I0 = np.interp(_t,I0[:,0],I0[:,1])     # [J m-2 d-1] PAR, light intensity at water surface
        _DVS = np.interp(_t,DVS[:,0],DVS[:,1])        # [°C] Environment temperature
        _Rain = np.interp(_t, Rain[:,0], Rain[:,1]) #[mm] Daily precipitation 
        
        # pd = 0.501 if 0 <= _DVS < 0.4 else 0.511 if 0.4 <= _DVS < 0.65 else 0.601
        # dr = 0.8 if 0 <= _Rain < 0.5 else 0.45 if 0.5 <= _Rain < 50 else 0.21 # derived from available dilution rate value and rainfall category from BMKG
        
        dilution_rate = [0.8, 0.72, 0.45, 0.21] #[d-1]
        rainfall_category = [ 0, 20, 100, 150] #[mm]
        dr = np.interp(_Rain, rainfall_category, dilution_rate)
        print('dilution rate', dr)
        
        #%%Fish
        # -- Initial conditions
        
        
        if _t < 24:
            Mfish = 0
            Mdig = 0
            Muri = 0
            f_upt = 0
            f_fed = 0
            f_digout = 0
            f_diguri = 0
            f_sol = 0
            f_N_sol = 0
            f_P_sol = 0
            Mfed = 0
            fT = 0
            fDO = 0
            dMfish_dt = 0
            dMdig_dt = 0
            dMuri_dt = 0
        elif _t == 79:
            dMfish_dt =- Mfish
            dMdig_dt =- Mdig
            dMuri_dt =- Muri
        elif _t >= 80:
            dMfish_dt =0
            dMdig_dt =0
            dMuri_dt =0
        else:
            Mfish = _x0[0]
            Mdig = _x0[1]
            Muri=  _x0[2]
            
            # -- Model parameteres
            
            # -- Physical constants
            DOmin = 0.3            # [g/m3] DO minimal for open-pond Nile Tilapia
            DOcrit = 1             # [g/m3] DO critical for open-pond Nile Tilapia
            d_pond = 0.6               # [m] pond depth
            
            # - fish growth
            tau_dig = self.p['tau_dig'] # [h] time constants for digestive
            tau_uri = self.p['tau_uri']  # [h] time constants for urinary
            k_upt = self.p['k_upt']  # [-] fraction of nutrient uptake for fish weight
            k_N_upt = self.p['k_N_upt']  # [-] fraction of N uptake by fish
            k_P_upt = self.p['k_P_upt']  # [-] fraction of P uptake by fish
            k_prt = self.p['k_prt']  # [-] fraction of particulate matter excreted
            k_N_prt = self.p['k_N_prt']  # [-] fraction of N particulate matter excreted
            k_P_prt = self.p['k_P_prt']  # [-] fraction of P particulate matter excreted
            x_N_fed = self.p['x_N_fed'] #[-] fraction of N in feed
            x_P_fed = self.p['x_P_fed'] #[-] fraction of P in feed
            k_DMR = self.p['k_DMR']
            k_TAN_sol = self.p['k_TAN_sol']
            k_N_sol = 1 - k_N_upt - k_N_prt # [-] fraction of N in soluble matter
            k_P_sol = 1 - k_P_upt - k_P_prt # [-] fraction of P in soluble matter
            Tmin = self.p['Tmin']  # [°C] Minimum Temperature for Nile Tilapia
            Topt = self.p['Topt']  # [°C] Optimum Temperature for Nile Tilapia
            Tmax = self.p['Tmax']  # [°C] Maximum Temperature for Nile Tilapia
            cl = self.p['cl'] #[m3 (d g)-1] phytoplankton crowding loss constant
            
            # -- Controlled input
            Mfed = self.u['Mfed'] #[g/m3]
            
            # supporting equations
            #Fish Model
            # [gDM d-1] total mass flow rate leaving the digestive system
            f_digout = (1/tau_dig)*Mdig
            # [gDM d-1] nutrient uptake rate
            f_upt = k_upt*f_digout
            # [gDM d-1] particulate matter excretion rate
            f_prt = k_prt*f_digout
            # [gDM d-1] soluble waste excretion rate
            f_sol = (1/tau_uri)*Muri
            # [gDM d-1] digestive to urinary rate
            f_diguri = f_digout - f_upt - f_prt
            
            #Nutrient Balances
            #N uptake flow rate by fish during growth
            f_N_upt = k_N_upt*x_N_fed*f_digout
            #N excretion flow rate by fish during growth
            f_N_prt = k_N_prt*x_N_fed*f_digout
            #P uptake flow rate by fish during growth
            f_P_upt = k_P_upt*x_P_fed*f_digout
            #P excretion flow rate by fish during growth
            f_P_prt = k_P_prt*x_P_fed*f_digout
            #N flow rate in soluble matter
            f_N_sol = k_N_sol*x_N_fed*(f_digout/f_diguri)*f_sol
            #P flow rate in soluble matter
            f_P_sol = k_P_sol*x_P_fed*(f_digout/f_diguri)*f_sol    
            
            # -- Supporting equations
            f_TAN = k_TAN_sol*f_N_sol #[g d-1]
            
            #-feed intake rate with disturbances factor
            fT = 0
            if _T >= Topt:
                fT = np.exp(-4.6*(((_T-Topt)/(Tmax-Topt))**4))
            else:
                fT = np.exp(-4.6*(((Topt-_T)/(Topt-Tmin))**4))
            
            fDO = 0
            if DOmin <= _DO <= DOcrit:
                fDO = (_DO-DOmin)/(DOcrit - DOmin)
            else:
                fDO = 1
        
        #%% Phytoplankton
        Mphy = _x0[3]
        N_deposit = _x0[4]
        P_deposit = _x0[5]
        Nfert_org =_x0[6] #[kg/ha] N content in organic fertilizer
        Pfert_org =_x0[7] #[kg/ha] P content in organic fertilizer
        # Npond = _x0[8]
        
        #- phytoplankton growth
        mu_phy = self.p['mu_phy'] #[d-1] maximum growth rate of phytoplankton
        mu_Up = self.p['mu_Up'] #[d-1] maximum nutrient uptake coefficientd
        l_sl = self.p['l_sl'] #[m2 g-1] phytoplankton biomass-specific light attenuation
        l_bg = self.p['l_bg'] #[m-1] light attenuation by non-phytoplankton components
        Kpp = self.p['Kpp'] # [J (m2 s)-1]half-saturation constant of phytoplankton production
        cm = self.p['cm'] #[d-1] phytoplankton natural mortality constant
        cl = self.p['cl'] #[m3 (d g)-1] phytoplankton crowding loss constant
        c1 = self.p['c1'] # [-] temperature coefficients 1
        c2 = self.p['c2'] # [-] temperature coefficients 2
        Topt = self.p['Topt'] #optimum temperature for phytoplankton growth
        K_N_phy = self.p['K_N_phy'] #[g m-3] half saturation constant for nutrient uptake
        K_P_phy = self.p['K_P_phy'] #[g m-3] half saturation constant for nutrient uptake        
        kNph = self.p['kNph'] #[-] fraction of N in phytoplankton dead bodies
        kPph = self.p['kPph'] #[-] fraction of P in phytoplankton dead bodies
        
        #nutrient source
        kNdecr = self.p['kNdecr'] #[d-1] decomposition rate (to replace decomposition rate of bacteria)
        kPdecr = self.p['kPdecr'] #[d-1] decomposition rate (to replace decomposition rate of bacteria)
        # Norgf = self.p['Norgf'] #[g m-2] N content from organic fertilizer, originally in kg/ha
        # Porgf = self.p['Porgf'] #[g m-2] P content from organic fertilizer, originally in kg/ha
        pond_volume = self.p['pond_volume']
        
        #Phyto model
        d_pond = 0.6
        k_In = _I0*np.exp(-d_pond*(l_sl*Mphy+l_bg))
        k_lm = (1/(d_pond*(l_sl*Mphy+l_bg)))*np.log((Kpp+_I0)/(Kpp+k_In))
        
        kTw = c1*np.exp(-c2*np.abs(_T-Topt))
                
        f2 = cm*Mphy #[g m-3 d-1]
        f3 = cl*(Mphy**2) #[g m-3 d-1]
        
        Nsource = Nfert_org/2 +f_N_sol/pond_volume +f3*kNph     #[g/m3]
        Psource = Pfert_org/2 +f_P_sol/pond_volume + f3*kPph   #[g/m3]
        # Tnutrient = Nsource + Psource
        # kNA = Tnutrient/(Tnutrient+Mp) #[g/m3]
        # NA = f_N_sol + f_P_sol #[g d-1]
        kN_phy = Nsource/(Nsource+K_N_phy) #[-]
        kP_phy = Psource/(Psource+K_P_phy) #[-]
        f4 = dr*Nsource #[g m-3 d-1]
        f5 = dr*Psource #[g m-3 d-1]
        
        f1 = mu_phy*k_lm*kTw*(kN_phy+kP_phy)*Mphy
        f6 = mu_Up*k_lm*kTw*kN_phy*Mphy
        f7 = mu_Up*k_lm*kTw*kP_phy*Mphy
        
        #Mfed = Mfish*0.03 #recommended amount of feed is 3% of the biomass weight

        f_fedmax = Mphy + Mfed #[g m-3]
        #According to Jamu and Prihadita 2002 
        f_fed = fT*fDO*(f_fedmax)
        f_fed_phy = (Mphy/(Kpp+Mphy))*f_fed
        
        # -- Differential equations [gDM day-1]
        dMphy_dt = f1 - f2 - f3
        # dNA_dt = f4 + f5 - f6
        dN_deposit_dt = f4 - f6 #[g/m3/d] 
        dP_deposit_dt = f5 - f7 #[g/m3/d]
        
        #Fertilizer depletion
        dNfert_org_dt = Nfert_org - Nfert_org*kNdecr
        if dNfert_org_dt < 0 and Nfert_org + dNfert_org_dt < 0:
            dNfert_org_dt = 0  # Set dNA_dt to -NA to ensure NA does not go below zero
        
        dPfert_org_dt = Pfert_org - Pfert_org*kPdecr
        if dPfert_org_dt < 0 and Pfert_org + dPfert_org_dt < 0:
            dPfert_org_dt = 0  # Set dNA_dt to -NA to ensure NA does not go below zero
        
        # if dNA_dt < 0 and NA + dNA_dt < 0:
        #     dNA_dt = 0  # Set dNA_dt to -NA to ensure NA does not go below zero
        if dN_deposit_dt < 0 and N_deposit + dN_deposit_dt < 0:
            dN_deposit_dt = 0  # Set dNA_dt to -NA to ensure NA does not go below zero
        if dP_deposit_dt < 0 and P_deposit + dP_deposit_dt < 0:
            dP_deposit_dt = 0  # Set dNA_dt to -NA to ensure NA does not go below zero

        # -- Store flows [kgC m-2 d-1]
        idx = np.isin(self.t, _t)
        # self.f['f_digout'][idx] = f_digout
        # self.f['f_fed'][idx] = f_fed
        # self.f['f_upt'][idx] = f_upt
        # self.f['f_prt'][idx] = f_prt
        # self.f['f_sol'][idx] = f_sol
        # self.f['f_diguri'][idx] = f_diguri
        # self.f['f_N_prt'][idx] = f_N_prt
        # self.f['f_P_prt'][idx] = f_P_prt
        # self.f['f_N_upt'][idx] = f_N_upt
        # self.f['f_P_upt'][idx] = f_P_upt
        # self.f['f_N_sol'][idx] = f_N_sol
        # self.f['f_P_sol'][idx] = f_P_sol
        # self.f['f_TAN'][idx] = f_TAN
        # self.f['f_fed_phy'][idx] = f_fed_phy
        self.f['f1'][idx] = f1
        self.f['f2'][idx] = f2
        self.f['f3'][idx] = f3
        self.f['f4'][idx] = f4
        self.f['f5'][idx] = f5
        self.f['f6'][idx] = f6
        self.f['f7'][idx] = f7
        
        
        if _t>= 24 or _t<80:
            self.f['f_digout'][idx] = 0
            self.f['f_fed'][idx] = 0
            self.f['f_upt'][idx] = 0
            self.f['f_prt'][idx] = 0
            self.f['f_sol'][idx] = 0
            self.f['f_diguri'][idx] = 0
            self.f['f_N_prt'][idx] = 0
            self.f['f_P_prt'][idx] = 0
            self.f['f_N_upt'][idx] = 0
            self.f['f_P_upt'][idx] = 0
            self.f['f_N_sol'][idx] = 0
            self.f['f_P_sol'][idx] = 0
            self.f['f_TAN'][idx] = 0
            self.f['f_fed_phy'][idx] = 0
        else:
            self.f['f_digout'][idx] = f_digout
            self.f['f_fed'][idx] = f_fed
            self.f['f_upt'][idx] = f_upt
            self.f['f_prt'][idx] = f_prt
            self.f['f_sol'][idx] = f_sol
            self.f['f_diguri'][idx] = f_diguri
            self.f['f_N_prt'][idx] = f_N_prt
            self.f['f_P_prt'][idx] = f_P_prt
            self.f['f_N_upt'][idx] = f_N_upt
            self.f['f_P_upt'][idx] = f_P_upt
            self.f['f_N_sol'][idx] = f_N_sol
            self.f['f_P_sol'][idx] = f_P_sol
            self.f['f_TAN'][idx] = f_TAN
            self.f['f_fed_phy'][idx] = f_fed_phy
        
        if _t < 24:
            dMfish_dt = 0
            dMdig_dt = 0
            dMuri_dt = 0
        elif _t == 79:
            dMfish_dt =- Mfish
            dMdig_dt =- Mdig
            dMuri_dt =- Muri
        elif _t >= 80:
            dMfish_dt =0
            dMdig_dt =0
            dMuri_dt =0
        else:
            dMfish_dt = f_upt
            dMdig_dt = f_fed - f_digout
            dMuri_dt = f_diguri - f_sol
            
        return np.array([dMfish_dt,
                         dMdig_dt, 
                         dMuri_dt,
                         dMphy_dt,
                         dN_deposit_dt,
                         dP_deposit_dt,
                         dNfert_org_dt,
                         dPfert_org_dt
                         ])
    
    def output(self, tspan):
        # Retrieve object properties
        dt = self.dt        # integration time step size
        diff = self.diff    # function with system of differential equations
        Mfish0 = self.x0['Mfish'] # initial condition
        Mdig0 = self.x0['Mdig'] # initial condiiton
        Muri0 = self.x0['Muri'] #initial condition
        Mphy0 = self.x0['Mphy'] # initial condition
        N_deposit0 = self.x0['N_deposit']
        P_deposit0 = self.x0['P_deposit']
        Nfert_org0 = self.x0['Nfert_org']
        Pfert_org0 = self.x0['Pfert_org']
        
        # Numerical integration
        y0 = np.array([Mfish0, 
                       Mdig0, 
                       Muri0,
                       Mphy0,
                       N_deposit0,
                       P_deposit0,
                       Nfert_org0,
                       Pfert_org0
                       ])
        y_int = fcn_euler_forward(diff,tspan,y0,h=dt)
        # y_int = fcn_rk4(diff, tspan, y0, h=dt)
        
        #if statements for harvest
        
        # Model results
        #State variables
        t = y_int['t']
        Mfish = y_int['y'][0,:]
        Mdig = y_int['y'][1,:]
        Muri = y_int['y'][2,:]
        Mphy = y_int['y'][3,:]      # first output (row 0, all columns)
        # NA = y_int['y'][4,:]      # second output (row 1, all columns)
        N_deposit = y_int['y'][4,:]
        P_deposit = y_int['y'][5,:]
        Nfert_org = y_int['y'][6,:]
        Pfert_org = y_int['y'][7,:]

        return {
            't':t,
            'Mfish': Mfish,
            'Mdig': Mdig,
            'Muri': Muri,
            'Mphy':Mphy, 
            # 'NA':NA,
            'N_deposit': N_deposit, 
            'P_deposit': P_deposit,
            'Nfert_org': Nfert_org,
            'Pfert_org': Pfert_org
        }
        